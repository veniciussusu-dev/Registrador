-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;


ENTITY Registrador is

port(
WE : in std_logic;
reset : in std_logic;
clk : in std_logic;
data : in std_logic_vector(7 downto 0);
adress : in std_logic_vector(7 downto 0);
q0 : in std_logic_vector(7 downto 0);
q1 : in std_logic_vector(7 downto 0);
q2 : in std_logic_vector(7 downto 0);
q3 : in std_logic_vector(7 downto 0)
);



end Registrador;


ARCHITECTURE reg of registrador is

-- chamar os reg e sinais de cada um
type reg_array is array(3 downto 0) of std_logic_vector(7 downto 0);
signal regs : reg_array := (others => ( others => '0'));


begin

process(clk, reset)
begin

if rising_edge(clk) then
	if reset='1' then
    	regs <= (others => (others => '0'));
        
	elsif we = '1' then
		regs(to_integer(adress)) <= data;
    
	elsif we = '0' then

        data <= regs(to_integer(adress));
 
 
		end if;
end if;
end process;

q0 <= regs(0);
q1 <= regs(1);
q2 <= regs(2);
q3 <= regs(3);

end ARCHITECTURE;
 
 
 
